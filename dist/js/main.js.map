{"version":3,"sources":["main.js"],"names":["console","log","resultsWindow","document","querySelector","picSearch_button","picSearch_query","tagsSearch_button","tagsSearch_query","photoIDs","SRCH_API_URL_BASE","INFO_API_URL_BASE","createPhotoMarker","infoResponse","photoDesc","data","photo","description","_content","photoURLs","urls","url","forEach","rawURL","img_URL","photoDiv","createElement","className","Image","photoContent","src","decode","innerText","appendChild","getPhotoInfo","photoID","axios","get","params","photo_id","then","catch","error","handleQueryResponse","response","photoReturn","photos","i","length","id","getQueryData","photoQuery","tagsQuery","text","tags","makeSearchRequest","event","preventDefault","value","addEventListener","map","markers","infowindow","initMap","circus","lat","lng","google","maps","Map","getElementById","center","zoom","content","InfoWindow","showContentInWindow","newContent","setContent","open","marker","window"],"mappings":"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","sourcesContent":["\n//get photo id data from FLICKRs search.photo api\n  //set method to input flickr_params:/user_query and to only return images with geo data:true\n// loop through data and store photo ids in an array [photoIDs]\n// get geo data using photoIDs photo.getLocatoin api\n// loop through data and set each as a marker with content window on google map's api \n\n\n\nconsole.log(\"hello, chello. GoogleFlickr1.0\");\n//0. define global function variables\nconst resultsWindow = document.querySelector(\".resultsWindow\");\nconst picSearch_button = document.querySelector(\"[name='picSearch_button']\");\nconst picSearch_query = document.querySelector(\"[name='SearchInputField']\");\nconst tagsSearch_button = document.querySelector(\"[name='tagsSearch_button']\");\nconst tagsSearch_query = document.querySelector(\"[name='tagsSearchInputField']\");\n//create blank array to store photo info in.\n// let photoDeck = [];\nlet photoIDs = [];\n;(function(){\n    //1. wrapped inside this function, define global function variables\n    console.log ('flicker function booted...');\n    //** the url containg info FLICKR needs to return requested data. User text is fed thru using template literals: ${var}. url stored in a var. */\n    const SRCH_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=47fa016833c10c7cf777062f48eb2908&tags=${tagsQuery}&text=${photoQuery}&max_upload_date=1567857600&has_geo=1&extras=geo&format=json&nojsoncallback=1';\n\n    const INFO_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.getInfo&api_key=47fa016833c10c7cf777062f48eb2908&photo_id=${photoID}&format=json&nojsoncallback=1';\n    \n    \n    //7. create markers to pass through to google's api\n    function createPhotoMarker(infoResponse){\n     console.log(\"loading marker info...\" )\n     //store object properties in values\n     let photoDesc = infoResponse.data.photo.description._content;\n     //target arrays that need to be looped thru \n     let photoURLs = infoResponse.data.photo.urls.url;\n    //loop through arrays, \n    photoURLs.forEach(rawURL => { //for each array, go into the array properties\n      let img_URL = rawURL._content; //and store in variable \n      // console.log (\"url info...\")\n      // console.log(img_URL);\n      //create div\n      let photoDiv = document.createElement('div');\n      photoDiv.className = \"flickr_result\";\n    \n      //create image\n      let photo = new Image(200 , 200);\n      \n      photo.className = \"flickr_photo\"\n      \n      //create container\n      let photoContent = document.createElement('p');\n      photoContent.className = \"flickr_content\";\n     \n      //place content\n      photo.src = img_URL;\n      photo.decode();\n       \n      photoContent.innerText = photoDesc;\n      //add container to div\n      photoDiv.appendChild(photo);\n      photoDiv.appendChild(photoContent);\n      //add div to page\n      resultsWindow.appendChild(photoDiv);\n    });\n  \n\n      //pass values to goole api for points\n      //pass values to display funciton \n      //console.log(photoDeck);\n    };\n    \n    \n    //6. repeat the process, sending photoIDs to flickr\n    function getPhotoInfo(photoID){ \n      console.log(\"fetching photo info...\");\n      axios.get(INFO_API_URL_BASE,{ //call the link\n        params:{\n          photo_id: photoID // pass thru your varibales to Flickr's parameters\n        }\n      }).then(function(infoResponse){ //then call this function\n        console.log(infoResponse);\n        createPhotoMarker(infoResponse); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n       console.log(\"infoResponse isn't working...\");\n       console.log(error); //show error code in the console\n      });\n    };\n   \n    \n\n    //5. process the data recieved from FLICKr, taking whats needed and sending where needed\n    function handleQueryResponse(response){\n      console.log(\"processing data...\");\n      //target the array from the data you want to loop through\n     let photoReturn = response.data.photos.photo;\n      //loop through the array of data\n      for (var i=0; i < photoReturn.length; i++){\n        //store specific data in variables\n        let photoID = photoReturn[i].id;\n        //call next function, passing through new array\n        getPhotoInfo(photoID);\n      }\n    };\n\n\n    //4. call FLICKRs.photo.search and pass user values along as Flickrs params\n    function getQueryData(photoQuery, tagsQuery){\n      console.log(\"fetching with GET:\" + photoQuery ,tagsQuery);\n      axios.get(SRCH_API_URL_BASE,{ //call the link\n        params:{\n          text: photoQuery, // pass thru your varibales to Flickr's parameters\n          tags: tagsQuery\n        }\n      }).then(function(response){ //then call this function\n        console.log(\"data retrieved for \" + photoQuery + \" with tags: \" + tagsQuery );\n        console.log(response); //show returned call data in the console\n        handleQueryResponse(response); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n        console.log(\"photo search isn't working...\");\n        console.log(error); //show error code in the console\n      }); //an addtional .then(function(var)) is always executed (optional)\n\n    };\n\n\n    //3.when button is clicked, do these things\n    function makeSearchRequest(event){ //changes value/calls getUserData()\n      //presents the browser from doing default behavior like refreshing/loading/ etc\n      event.preventDefault()\n      //turn user text into variable\n      const photoQuery = picSearch_query.value;\n      const tagsQuery = tagsSearch_query.value;\n      console.log('value of photo query: ', photoQuery)\n      console.log('value of photo query: ', tagsQuery)\n      //pass variables to next function\n      getQueryData(photoQuery,tagsQuery);\n      //function still works if one value is not entered.\n    };\n\n    //2. When user clickes the button, run this function\n    picSearch_button.addEventListener(\"click\", makeSearchRequest); //when user clicks button,\n    tagsSearch_button.addEventListener(\"click\", makeSearchRequest);// run this function\n\n    ////-----------GOOGLE MAPS---------------- GOOGLE MAPS------------------GOOGLE MAPS-----////\n\n    var map;\n    //var service;\n    var markers = [];\n    var infowindow = null;\n\n\n  function initMap() {\n\n    console.log(\"init map is here\")\n\n    var circus = {lat:33.813245, lng: -84.362171};\n    map = new google.maps.Map(document.getElementById('map'), {\n      center: circus,\n      zoom: 12\n    });\n   //makes places API a variable \n   \n    var content =\"something about this marker\"\n    infowindow= new google.maps.InfoWindow({\n      content: content\n\n    });\n    \n    //marker uses parameters and must include map: map to load the mapAPI \n    //var marker = new google.maps.Marker({position: circus, map: map});\n\n    function showContentInWindow(newContent){\n            //variable is placed in new content window\n        infowindow.setContent(newContent)\n            //content is set above the indicated marker\n        infowindow.open(map, marker);\n    }\n    \n    // marker.addListener(\"click\", function (){\n    //   //content is passed through the function \n    //   showContentInWindow(\"this is new content\");\n    //   console.log(\"clicky\");\n    // });\n}\nwindow.initMap = initMap;\n})()"],"file":"main.js"}