{"version":3,"sources":["main.js"],"names":["console","log","picSearch_button","document","querySelector","picSearch_query","tagsSearch_button","tagsSearch_query","photoDeck","SRCH_API_URL_BASE","INFO_API_URL_BASE","getPhotoInfo","photoID","axios","get","params","photo_id","then","infoResponse","push","catch","error","handleQueryResponse","response","photoReturn","data","photos","photo","i","length","id","getQueryData","photoQuery","tagsQuery","text","tags","makeSearchRequest","event","preventDefault","value","addEventListener","map","markers","infowindow","initMap","circus","lat","lng","google","maps","Map","getElementById","center","zoom","content","InfoWindow","showContentInWindow","newContent","setContent","open","marker","window"],"mappings":"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","sourcesContent":["\n//get photo id data from FLICKRs search.photo api\n  //set method to input flickr_params:/user_query and to only return images with geo data:true\n// loop through data and store photo ids in an array [photoIDs]\n// get geo data using photoIDs photo.getLocatoin api\n// loop through data and set each as a marker with content window on google map's api \n\n\n\nconsole.log(\"hello, chello. GoogleFlickr1.0\");\n//0. define global function variables\nconst picSearch_button = document.querySelector(\"[name='picSearch_button']\");\nconst picSearch_query = document.querySelector(\"[name='SearchInputField']\");\nconst tagsSearch_button = document.querySelector(\"[name='tagsSearch_button']\");\nconst tagsSearch_query = document.querySelector(\"[name='tagsSearchInputField']\");\n//create blank array to store photo info in.\nlet photoDeck = [];\n\n;(function(){\n    //1. wrapped inside this function, define global function variables\n    console.log ('flicker function booted...');\n    //** the url containg info FLICKR needs to return requested data. User text is fed thru using template literals: ${var}. url stored in a var. */\n    const SRCH_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=47fa016833c10c7cf777062f48eb2908&tags=${tagsQuery}&text=${photoQuery}&has_geo=1&extras=geo&format=json&nojsoncallback=1';\n\n    const INFO_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.getInfo&api_key=47fa016833c10c7cf777062f48eb2908&photo_id=${photoID}&format=json&nojsoncallback=1';\n    \n    //6. repeat the process, sending photoIDs to flickr\n    function getPhotoInfo(photoID){ \n      console.log(\"fetching photo info...\");\n      //clear array for incoming data\n      photoDeck = [];\n      axios.get(INFO_API_URL_BASE,{ //call the link\n        params:{\n          photo_id: photoID // pass thru your varibales to Flickr's parameters\n        }\n      }).then(function(infoResponse){ //then call this function\n        //add responses to new array\n        photoDeck.push(infoResponse);\n       \n      // createPhotoMarker(infoResponse); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n       console.log(\"infoResponse isn't working...\");\n       console.log(error); //show error code in the console\n      });\n    \n    };\n    \n\n    //5. process the data recieved from FLICKr, taking whats needed and sending where needed\n    function handleQueryResponse(response){\n      console.log(\"processing data...\");\n      //target the array from the data you want to loop through\n     let photoReturn = response.data.photos.photo;\n     //clear photoIDs array of any previously stored ids\n     //photoIDs = [];\n      //loop through the array of data\n      for (var i=0; i < photoReturn.length; i++){\n        //store specific data in variables\n        let photoID = photoReturn[i].id;\n        //call next function, passing through new array\n        getPhotoInfo(photoID);\n      }\n    };\n\n\n    //4. call FLICKRs.photo.search and pass user values along as Flickrs params\n    function getQueryData(photoQuery, tagsQuery){\n      console.log(\"fetching with GET:\" + photoQuery ,tagsQuery);\n      axios.get(SRCH_API_URL_BASE,{ //call the link\n        params:{\n          text: photoQuery, // pass thru your varibales to Flickr's parameters\n          tags: tagsQuery\n        }\n      }).then(function(response){ //then call this function\n        console.log(\"data retrieved for \" + photoQuery + \" with tags: \" + tagsQuery );\n        console.log(response); //show returned call data in the console\n        handleQueryResponse(response); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n        console.log(\"photo search isn't working...\");\n        console.log(error); //show error code in the console\n      }); //an addtional .then(function(var)) is always executed (optional)\n\n    };\n\n\n    //3.when button is clicked, do these things\n    function makeSearchRequest(event){ //changes value/calls getUserData()\n      //presents the browser from doing default behavior like refreshing/loading/ etc\n      event.preventDefault()\n      //turn user text into variable\n      const photoQuery = picSearch_query.value;\n      const tagsQuery = tagsSearch_query.value;\n      console.log('value of photo query: ', photoQuery)\n      console.log('value of photo query: ', tagsQuery)\n      //pass variables to next function\n      getQueryData(photoQuery,tagsQuery);\n      //function still works if one value is not entered.\n    };\n\n    //2. When user clickes the button, run this function\n    picSearch_button.addEventListener(\"click\", makeSearchRequest); //when user clicks button,\n    tagsSearch_button.addEventListener(\"click\", makeSearchRequest);// run this function\n\n    ////-----------GOOGLE MAPS---------------- GOOGLE MAPS------------------GOOGLE MAPS-----////\n\n    var map;\n    //var service;\n    var markers = [];\n    var infowindow = null;\n\n\n  function initMap() {\n\n    console.log(\"init map is here\")\n\n    var circus = {lat:33.813245, lng: -84.362171};\n    map = new google.maps.Map(document.getElementById('map'), {\n      center: circus,\n      zoom: 12\n    });\n   //makes places API a variable \n   \n    var content =\"something about this marker\"\n    infowindow= new google.maps.InfoWindow({\n      content: content\n\n    });\n    \n    //marker uses parameters and must include map: map to load the mapAPI \n    //var marker = new google.maps.Marker({position: circus, map: map});\n\n    function showContentInWindow(newContent){\n            //variable is placed in new content window\n        infowindow.setContent(newContent)\n            //content is set above the indicated marker\n        infowindow.open(map, marker);\n    }\n    \n    // marker.addListener(\"click\", function (){\n    //   //content is passed through the function \n    //   showContentInWindow(\"this is new content\");\n    //   console.log(\"clicky\");\n    // });\n}\nwindow.initMap = initMap;\n})()"],"file":"main.js"}