{"version":3,"sources":["main.js"],"names":["console","log","resultsWindow","document","querySelector","picSearch_button","picSearch_query","tagsSearch_button","tagsSearch_query","photoIDs","SRCH_API_URL_BASE","INFO_API_URL_BASE","IMGurl_API_URL_BASE","createPhotoBox","infoResponse","photoDeck","data","photo","title","_content","resultPane","createElement","className","resultImg","photoContent","innerText","appendChild","pullURLS","infoImage","photoSizes","sizes","img_lgSq","size","find","label","imgSrc","source","imgWindow","setAttribute","getPhotoInfo","photoID","axios","get","params","photo_id","then","catch","error","setTimeout","handleQueryResponse","response","photoReturn","photos","i","length","id","getQueryData","photoQuery","tagsQuery","text","tags","makeSearchRequest","event","preventDefault","value","addEventListener","map","markers","infowindow","initMap","circus","lat","lng","google","maps","Map","getElementById","center","zoom","content","InfoWindow","showContentInWindow","newContent","setContent","open","marker","window"],"mappings":";;AACA;AACE;AACF;AACA;AACA;AAIAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,E,CACA;;AACA,IAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAtB;AACA,IAAMC,gBAAgB,GAAGF,QAAQ,CAACC,aAAT,CAAuB,2BAAvB,CAAzB;AACA,IAAME,eAAe,GAAGH,QAAQ,CAACC,aAAT,CAAuB,2BAAvB,CAAxB;AACA,IAAMG,iBAAiB,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,4BAAvB,CAA1B;AACA,IAAMI,gBAAgB,GAAGL,QAAQ,CAACC,aAAT,CAAuB,+BAAvB,CAAzB,C,CACA;AACA;;AACA,IAAIK,QAAQ,GAAG,EAAf;AACA;;AAAC,CAAC,YAAU;AACR;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAa,4BAAb,EAFQ,CAGR;;AACA,MAAMS,iBAAiB,GAAE,8NAAzB;AAEA,MAAMC,iBAAiB,GAAE,8JAAzB;AAEA,MAAMC,mBAAmB,GAAG,+JAA5B,CARQ,CAaR;;AACA,WAASC,cAAT,CAAwBC,YAAxB,EAAqC;AAEpCd,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAFoC,CAGpC;;AACA,QAAIc,SAAS,GAAGD,YAAY,CAACE,IAAb,CAAkBC,KAAlB,CAAwBC,KAAxB,CAA8BC,QAA9C,CAJoC,CAKnC;;AACA,QAAIC,UAAU,GAAGjB,QAAQ,CAACkB,aAAT,CAAuB,KAAvB,CAAjB;AACAD,IAAAA,UAAU,CAACE,SAAX,GAAuB,eAAvB;AAEA,QAAIC,SAAS,GAAGpB,QAAQ,CAACkB,aAAT,CAAuB,KAAvB,CAAhB;AACAE,IAAAA,SAAS,CAACD,SAAV,GAAsB,YAAtB,CAVmC,CAanC;;AACA,QAAIE,YAAY,GAAGrB,QAAQ,CAACkB,aAAT,CAAuB,GAAvB,CAAnB;AACAG,IAAAA,YAAY,CAACF,SAAb,GAAyB,gBAAzB,CAfmC,CAgBnC;;AAEAE,IAAAA,YAAY,CAACC,SAAb,GAAyBV,SAAzB,CAlBmC,CAmBnC;AACA;;AACAK,IAAAA,UAAU,CAACM,WAAX,CAAuBH,SAAvB;AACAH,IAAAA,UAAU,CAACM,WAAX,CAAuBF,YAAvB,EAtBmC,CAuBnC;;AACAtB,IAAAA,aAAa,CAACwB,WAAd,CAA0BN,UAA1B,EAxBmC,CA0BrC;AACA;AACA;AACC;;AAGD,WAASO,QAAT,CAAkBC,SAAlB,EAA4B;AAE1B,QAAIC,UAAU,GAAGD,SAAS,CAACZ,IAAV,CAAec,KAAhC;AACA9B,IAAAA,OAAO,CAACC,GAAR,CAAY4B,UAAZ;AACA,QAAIE,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAgBC,IAAhB,CAAsB;AAAA,UAAGC,KAAH,QAAGA,KAAH;AAAA,aAAeA,KAAK,KAAK,cAAzB;AAAA,KAAtB,CAAf;AACA,QAAIC,MAAM,GAAGJ,QAAQ,CAACK,MAAtB;AACApC,IAAAA,OAAO,CAACC,GAAR,CAAYkC,MAAZ,EAN0B,CAQ1B;AACA;AACA;;AACA,QAAIE,SAAS,GAAGlC,QAAQ,CAACkB,aAAT,CAAuB,KAAvB,CAAhB;AACAgB,IAAAA,SAAS,CAACC,YAAV,CAAuB,KAAvB,EAA8BH,MAA9B;AACAE,IAAAA,SAAS,CAACf,SAAV,GAAsB,YAAtB,CAb0B,CAc1B;;AACApB,IAAAA,aAAa,CAACwB,WAAd,CAA0BW,SAA1B;AAED;;AAAA,GA/DO,CAiER;;AACA,WAASE,YAAT,CAAsBC,OAAtB,EAA8B;AAC5B;AACAxC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAwC,IAAAA,KAAK,CAACC,GAAN,CAAU/B,iBAAV,EAA4B;AAAE;AAC5BgC,MAAAA,MAAM,EAAC;AACLC,QAAAA,QAAQ,EAAEJ,OADL,CACa;;AADb;AADmB,KAA5B,EAIGK,IAJH,CAIQ,UAAS/B,YAAT,EAAsB;AAAE;AAC/B;AACC;AACAD,MAAAA,cAAc,CAACC,YAAD,CAAd,CAH4B,CAGE;AAC/B,KARD,EAQGgC,KARH,CAQS,UAAUC,KAAV,EAAgB;AAAE;AAC1B/C,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY8C,KAAZ,EAFwB,CAEJ;AACpB,KAXD,EAH4B,CAgB5B;;AACA/C,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAwC,IAAAA,KAAK,CAACC,GAAN,CAAU9B,mBAAV,EAA8B;AAAE;AAC9B+B,MAAAA,MAAM,EAAC;AACLC,QAAAA,QAAQ,EAAEJ,OADL,CACa;;AADb;AADqB,KAA9B,EAIGK,IAJH,CAIQ,UAASjB,SAAT,EAAmB;AAAE;AAC5B;AACA;AACAoB,MAAAA,UAAU,CAACrB,QAAQ,CAACC,SAAD,CAAT,EAAqB,IAArB,CAAV,CAH0B,CAGY;AACtC;AACA,KATD,EASGkB,KATH,CASS,UAAUC,KAAV,EAAgB;AAAE;AAC1B/C,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY8C,KAAZ,EAFwB,CAEJ;AACpB,KAZD,EAlB4B,CA+B5B;AACD;;AAAA,GAlGO,CAsGR;;AACA,WAASE,mBAAT,CAA6BC,QAA7B,EAAsC;AACpClD,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADoC,CAEpC;;AACD,QAAIkD,WAAW,GAAGD,QAAQ,CAAClC,IAAT,CAAcoC,MAAd,CAAqBnC,KAAvC,CAHqC,CAIpC;;AACA,SAAK,IAAIoC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGF,WAAW,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;AACxC;AACA,UAAIb,OAAO,GAAGW,WAAW,CAACE,CAAD,CAAX,CAAeE,EAA7B,CAFwC,CAGxC;;AACAhB,MAAAA,YAAY,CAACC,OAAD,CAAZ;AACD;AACF;;AAAA,GAlHO,CAqHR;;AACA,WAASgB,YAAT,CAAsBC,UAAtB,EAAkCC,SAAlC,EAA4C;AAC1C1D,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBwD,UAAnC,EAA+CC,SAA/C;AACAjB,IAAAA,KAAK,CAACC,GAAN,CAAUhC,iBAAV,EAA4B;AAAE;AAC5BiC,MAAAA,MAAM,EAAC;AACLgB,QAAAA,IAAI,EAAEF,UADD;AACa;AAClBG,QAAAA,IAAI,EAAEF;AAFD;AADmB,KAA5B,EAKGb,IALH,CAKQ,UAASK,QAAT,EAAkB;AAAE;AAC1BlD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBwD,UAAxB,GAAqC,cAArC,GAAsDC,SAAlE;AACA1D,MAAAA,OAAO,CAACC,GAAR,CAAYiD,QAAZ,EAFwB,CAED;;AACvBD,MAAAA,mBAAmB,CAACC,QAAD,CAAnB,CAHwB,CAGO;AAChC,KATD,EASGJ,KATH,CASS,UAAUC,KAAV,EAAgB;AAAE;AACzB/C,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY8C,KAAZ,EAFuB,CAEH;AACrB,KAZD,EAF0C,CActC;AAEL;;AAAA,GAtIO,CAyIR;;AACA,WAASc,iBAAT,CAA2BC,KAA3B,EAAiC;AAAE;AACjC;AACAA,IAAAA,KAAK,CAACC,cAAN,GAF+B,CAG/B;;AACA,QAAMN,UAAU,GAAGnD,eAAe,CAAC0D,KAAnC;AACA,QAAMN,SAAS,GAAGlD,gBAAgB,CAACwD,KAAnC;AACAhE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCwD,UAAtC;AACAzD,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCyD,SAAtC,EAP+B,CAQ/B;;AACAF,IAAAA,YAAY,CAACC,UAAD,EAAYC,SAAZ,CAAZ,CAT+B,CAU/B;AACD;;AAAA,GArJO,CAuJR;;AACArD,EAAAA,gBAAgB,CAAC4D,gBAAjB,CAAkC,OAAlC,EAA2CJ,iBAA3C,EAxJQ,CAwJuD;;AAC/DtD,EAAAA,iBAAiB,CAAC0D,gBAAlB,CAAmC,OAAnC,EAA4CJ,iBAA5C,EAzJQ,CAyJuD;AAE/D;;AAEA,MAAIK,GAAJ,CA7JQ,CA8JR;;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,UAAU,GAAG,IAAjB;;AAGF,WAASC,OAAT,GAAmB;AAEjBrE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,QAAIqE,MAAM,GAAG;AAACC,MAAAA,GAAG,EAAC,SAAL;AAAgBC,MAAAA,GAAG,EAAE,CAAC;AAAtB,KAAb;AACAN,IAAAA,GAAG,GAAG,IAAIO,MAAM,CAACC,IAAP,CAAYC,GAAhB,CAAoBxE,QAAQ,CAACyE,cAAT,CAAwB,KAAxB,CAApB,EAAoD;AACxDC,MAAAA,MAAM,EAAEP,MADgD;AAExDQ,MAAAA,IAAI,EAAE;AAFkD,KAApD,CAAN,CALiB,CASlB;;AAEC,QAAIC,OAAO,GAAE,6BAAb;AACAX,IAAAA,UAAU,GAAE,IAAIK,MAAM,CAACC,IAAP,CAAYM,UAAhB,CAA2B;AACrCD,MAAAA,OAAO,EAAEA;AAD4B,KAA3B,CAAZ,CAZiB,CAiBjB;AACA;;AAEA,aAASE,mBAAT,CAA6BC,UAA7B,EAAwC;AAChC;AACJd,MAAAA,UAAU,CAACe,UAAX,CAAsBD,UAAtB,EAFoC,CAGhC;;AACJd,MAAAA,UAAU,CAACgB,IAAX,CAAgBlB,GAAhB,EAAqBmB,MAArB;AACH,KAzBgB,CA2BjB;AACA;AACA;AACA;AACA;;AACH;;AACDC,EAAAA,MAAM,CAACjB,OAAP,GAAiBA,OAAjB;AACC,CArMA","sourcesContent":["\n//get photo id data from FLICKRs search.photo api\n  //set method to input flickr_params:/user_query and to only return images with geo data:true\n// loop through data and store photo ids in an array [photoIDs]\n// get geo data using photoIDs photo.getLocatoin api\n// loop through data and set each as a marker with content window on google map's api \n\n\n\nconsole.log(\"hello, chello. GoogleFlickr1.0\");\n//0. define global function variables\nconst resultsWindow = document.querySelector(\".resultsWindow\");\nconst picSearch_button = document.querySelector(\"[name='picSearch_button']\");\nconst picSearch_query = document.querySelector(\"[name='SearchInputField']\");\nconst tagsSearch_button = document.querySelector(\"[name='tagsSearch_button']\");\nconst tagsSearch_query = document.querySelector(\"[name='tagsSearchInputField']\");\n//create blank array to store photo info in.\n// let photoDeck = [];\nlet photoIDs = [];\n;(function(){\n    //1. wrapped inside this function, define global function variables\n    console.log ('flicker function booted...');\n    //** the url containg info FLICKR needs to return requested data. User text is fed thru using template literals: ${var}. url stored in a var. */\n    const SRCH_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=47fa016833c10c7cf777062f48eb2908&tags=${tagsQuery}&text=${photoQuery}&max_upload_date=1567857600&has_geo=1&extras=geo&format=json&nojsoncallback=1';\n\n    const INFO_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.getInfo&api_key=47fa016833c10c7cf777062f48eb2908&photo_id=${photoID}&format=json&nojsoncallback=1';\n    \n    const IMGurl_API_URL_BASE = 'https://www.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key=47fa016833c10c7cf777062f48eb2908&photo_id=${photoID}&format=json&nojsoncallback=1';\n\n\n \n\n    //7. create markers to pass through to google's api\n    function createPhotoBox(infoResponse){ \n\n     console.log(\"loading marker info...\" )\n     //store object properties in values\n     let photoDeck = infoResponse.data.photo.title._content;\n      //create div\n      let resultPane = document.createElement('div');\n      resultPane.className = \"flickr_result\";\n\n      let resultImg = document.createElement('div');\n      resultImg.className = \"flickr_img\";\n     \n\n      //create container for text\n      let photoContent = document.createElement('p');\n      photoContent.className = \"flickr_content\";\n      //place content in container\n      \n      photoContent.innerText = photoDeck;\n      //add containers to div\n      // resultPane.appendChild(photo);\n      resultPane.appendChild(resultImg);\n      resultPane.appendChild(photoContent);\n      //add div to page\n      resultsWindow.appendChild(resultPane);\n\n    //pass values to goole api for points\n    //pass values to display funciton \n    //console.log(photoDeck);\n    }\n   \n   \n    function pullURLS(infoImage){\n      \n      let photoSizes = infoImage.data.sizes;\n      console.log(photoSizes)\n      let img_lgSq = photoSizes.size.find( ({ label }) => label === 'Large Square' );\n      let imgSrc = img_lgSq.source;\n      console.log(imgSrc);\n\n      // // create img\n      // let photo = new Image (150, 150);\n      // photo.src = imgSrc;\n      let imgWindow = document.createElement(\"img\");\n      imgWindow.setAttribute(\"src\", imgSrc)\n      imgWindow.className = \"flickr_img\";\n      //let card = document.querySelector(\"flickr_img\");\n      resultsWindow.appendChild(imgWindow)\n\n    };\n    \n    //6. repeat the process, sending photoIDs to flickr\n    function getPhotoInfo(photoID){ \n      //CALL 1 GETS USER INFO ON PHOTOS IN NEATER OBJECTS\n      console.log(\"fetching photo info...\");\n      axios.get(INFO_API_URL_BASE,{ //call the link\n        params:{\n          photo_id: photoID // pass thru your varibales to Flickr's parameters\n        }\n      }).then(function(infoResponse){ //then call this function\n       //return infoResponse;\n        //console.log(infoResponse);\n        createPhotoBox(infoResponse); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n       console.log(\"infoResponse isn't working...\");\n       console.log(error); //show error code in the console\n      });\n\n      ///CALL 2 GETS PHOTO SRC IN VARIOUS SIZES AS JPGS\n      console.log(\"fetching photo sizes...\");\n      axios.get(IMGurl_API_URL_BASE,{ //call the link\n        params:{\n          photo_id: photoID // pass thru your varibales to Flickr's parameters\n        }\n      }).then(function(infoImage){ //then call this function\n       //return (infoImage);\n       //console.log(infoImage);\n       setTimeout(pullURLS(infoImage),2000); //pass the data to the next function;\n       //createPhotoBox(infoImage)\n      }).catch(function (error){ //if get function failed, call this function \n       console.log(\"infoImage isn't working...\");\n       console.log(error); //show error code in the console\n      });\n      //createPhotoBox(infoResponse, infoImage);//pass the data to the next function;\n    };\n\n    \n\n    //5. process the data recieved from FLICKr, taking whats needed and sending where needed\n    function handleQueryResponse(response){\n      console.log(\"processing data...\");\n      //target the array from the data you want to loop through\n     let photoReturn = response.data.photos.photo;\n      //loop through the array of data\n      for (var i=0; i < photoReturn.length; i++){\n        //store specific data in variables\n        let photoID = photoReturn[i].id;\n        //call next function, passing through new array\n        getPhotoInfo(photoID);\n      }\n    };\n\n\n    //4. call FLICKRs.photo.search and pass user values along as Flickrs params\n    function getQueryData(photoQuery, tagsQuery){\n      console.log(\"fetching with GET:\" + photoQuery ,tagsQuery);\n      axios.get(SRCH_API_URL_BASE,{ //call the link\n        params:{\n          text: photoQuery, // pass thru your varibales to Flickr's parameters\n          tags: tagsQuery\n        }\n      }).then(function(response){ //then call this function\n        console.log(\"data retrieved for \" + photoQuery + \" with tags: \" + tagsQuery );\n        console.log(response); //show returned call data in the console\n        handleQueryResponse(response); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n        console.log(\"photo search isn't working...\");\n        console.log(error); //show error code in the console\n      }); //an addtional .then(function(var)) is always executed (optional)\n\n    };\n\n\n    //3.when button is clicked, do these things\n    function makeSearchRequest(event){ //changes value/calls getUserData()\n      //presents the browser from doing default behavior like refreshing/loading/ etc\n      event.preventDefault()\n      //turn user text into variable\n      const photoQuery = picSearch_query.value;\n      const tagsQuery = tagsSearch_query.value;\n      console.log('value of photo query: ', photoQuery)\n      console.log('value of photo query: ', tagsQuery)\n      //pass variables to next function\n      getQueryData(photoQuery,tagsQuery);\n      //function still works if one value is not entered.\n    };\n\n    //2. When user clickes the button, run this function\n    picSearch_button.addEventListener(\"click\", makeSearchRequest); //when user clicks button,\n    tagsSearch_button.addEventListener(\"click\", makeSearchRequest);// run this function\n\n    ////-----------GOOGLE MAPS---------------- GOOGLE MAPS------------------GOOGLE MAPS-----////\n\n    var map;\n    //var service;\n    var markers = [];\n    var infowindow = null;\n\n\n  function initMap() {\n\n    console.log(\"init map is here\")\n\n    var circus = {lat:33.813245, lng: -84.362171};\n    map = new google.maps.Map(document.getElementById('map'), {\n      center: circus,\n      zoom: 12\n    });\n   //makes places API a variable \n   \n    var content =\"something about this marker\"\n    infowindow= new google.maps.InfoWindow({\n      content: content\n\n    });\n    \n    //marker uses parameters and must include map: map to load the mapAPI \n    //var marker = new google.maps.Marker({position: circus, map: map});\n\n    function showContentInWindow(newContent){\n            //variable is placed in new content window\n        infowindow.setContent(newContent)\n            //content is set above the indicated marker\n        infowindow.open(map, marker);\n    }\n    \n    // marker.addListener(\"click\", function (){\n    //   //content is passed through the function \n    //   showContentInWindow(\"this is new content\");\n    //   console.log(\"clicky\");\n    // });\n}\nwindow.initMap = initMap;\n})()"],"file":"main.js"}