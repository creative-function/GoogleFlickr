{"version":3,"sources":["main.js"],"names":["console","log","resultsWindow","document","querySelector","picSearch_button","picSearch_query","tagsSearch_button","tagsSearch_query","SRCH_API_URL_BASE","INFO_API_URL_BASE","IMGurl_API_URL_BASE","createPhotoBox","infoResponse","photoDeck","data","photo","title","_content","resultPane","createElement","className","resultImg","photoContent","innerText","appendChild","pullURLS","infoImage","photoSizes","sizes","img_lgSq","size","find","label","imgSrc","source","imgWindow","setAttribute","img_box","body","append","getPhotoInfo","photoID","axios","get","params","photo_id","then","catch","error","handleQueryResponse","response","photoReturn","photos","i","length","id","getQueryData","photoQuery","tagsQuery","text","tags","makeSearchRequest","event","preventDefault","value","addEventListener","map","markers","infowindow","initMap","circus","lat","lng","google","maps","Map","getElementById","center","zoom","content","InfoWindow","showContentInWindow","newContent","setContent","open","marker","window"],"mappings":";;AACA;AACE;AACF;AACA;AACA;;AAGA;;;;;;;;AAUAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,E,CACA;;AACA,IAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAtB;AACA,IAAMC,gBAAgB,GAAGF,QAAQ,CAACC,aAAT,CAAuB,2BAAvB,CAAzB;AACA,IAAME,eAAe,GAAGH,QAAQ,CAACC,aAAT,CAAuB,2BAAvB,CAAxB;AACA,IAAMG,iBAAiB,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,4BAAvB,CAA1B;AACA,IAAMI,gBAAgB,GAAGL,QAAQ,CAACC,aAAT,CAAuB,+BAAvB,CAAzB;AAEA;;AAAC,CAAC,YAAU;AACR;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAa,4BAAb,EAFQ,CAGR;;AACA,MAAMQ,iBAAiB,GAAE,8NAAzB;AAEA,MAAMC,iBAAiB,GAAE,8JAAzB;AAEA,MAAMC,mBAAmB,GAAG,+JAA5B,CARQ,CAWR;;AACA,WAASC,cAAT,CAAwBC,YAAxB,EAAqC;AACpCb,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADoC,CAEpC;;AACA,QAAIa,SAAS,GAAGD,YAAY,CAACE,IAAb,CAAkBC,KAAlB,CAAwBC,KAAxB,CAA8BC,QAA9C,CAHoC,CAInC;;AACA,QAAIC,UAAU,GAAGhB,QAAQ,CAACiB,aAAT,CAAuB,KAAvB,CAAjB;AACAD,IAAAA,UAAU,CAACE,SAAX,GAAuB,eAAvB,CANmC,CAOnC;;AACA,QAAIC,SAAS,GAAGnB,QAAQ,CAACiB,aAAT,CAAuB,KAAvB,CAAhB;AACAE,IAAAA,SAAS,CAACD,SAAV,GAAsB,YAAtB,CATmC,CAUnC;;AACA,QAAIE,YAAY,GAAGpB,QAAQ,CAACiB,aAAT,CAAuB,GAAvB,CAAnB;AACAG,IAAAA,YAAY,CAACF,SAAb,GAAyB,gBAAzB,CAZmC,CAanC;;AACAE,IAAAA,YAAY,CAACC,SAAb,GAAyBV,SAAzB,CAdmC,CAenC;;AACAK,IAAAA,UAAU,CAACM,WAAX,CAAuBH,SAAvB;AACAH,IAAAA,UAAU,CAACM,WAAX,CAAuBF,YAAvB,EAjBmC,CAkBnC;;AACArB,IAAAA,aAAa,CAACuB,WAAd,CAA0BN,UAA1B;AACD;;AAAA,GAhCO,CAiCR;;AACA,WAASO,QAAT,CAAkBC,SAAlB,EAA4B;AAE1B,QAAIC,UAAU,GAAGD,SAAS,CAACZ,IAAV,CAAec,KAAhC,CAF0B,CAG1B;;AACA7B,IAAAA,OAAO,CAACC,GAAR,CAAY2B,UAAZ,EAJ0B,CAIF;;AACxB,QAAIE,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAgBC,IAAhB,CAAsB;AAAA,UAAGC,KAAH,QAAGA,KAAH;AAAA,aAAeA,KAAK,KAAK,cAAzB;AAAA,KAAtB,CAAf;AACA,QAAIC,MAAM,GAAGJ,QAAQ,CAACK,MAAtB,CAN0B,CAMI;;AAE9B,QAAIC,SAAS,GAAGjC,QAAQ,CAACiB,aAAT,CAAuB,KAAvB,CAAhB,CAR0B,CAQqB;;AAC/CgB,IAAAA,SAAS,CAACC,YAAV,CAAuB,KAAvB,EAA8BH,MAA9B,EAT0B,CASY;;AACtCE,IAAAA,SAAS,CAACf,SAAV,GAAsB,YAAtB,CAV0B,CAUU;;AACpC,QAAIiB,OAAO,GAAGnC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAd;AACAD,IAAAA,QAAQ,CAACoC,IAAT,CAAcC,MAAd,CAAqBJ,SAArB,EAZ0B,CAYM;AACjC;;AAAA,GA/CO,CAiDR;;AACA,WAASK,YAAT,CAAsBC,OAAtB,EAA8B;AAE5B;AAGA1C,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA0C,IAAAA,KAAK,CAACC,GAAN,CAAUlC,iBAAV,EAA4B;AAAE;AAC5BmC,MAAAA,MAAM,EAAC;AACLC,QAAAA,QAAQ,EAAEJ,OADL,CACa;;AADb;AADmB,KAA5B,EAIGK,IAJH,CAIQ,UAASlC,YAAT,EAAsB;AAAE;AAC9Bb,MAAAA,OAAO,CAACC,GAAR,CAAYY,YAAZ;AACAD,MAAAA,cAAc,CAACC,YAAD,CAAd,CAF4B,CAEE;AAC/B,KAPD,EAOGmC,KAPH,CAOS,UAAUC,KAAV,EAAgB;AAAE;AAC1BjD,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYgD,KAAZ,EAFwB,CAEJ;AACpB,KAVD,EAN4B,CAkB5B;;AAEAjD,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA0C,IAAAA,KAAK,CAACC,GAAN,CAAUjC,mBAAV,EAA8B;AAAE;AAC9BkC,MAAAA,MAAM,EAAC;AACLC,QAAAA,QAAQ,EAAEJ,OADL,CACa;;AADb;AADqB,KAA9B,EAIGK,IAJH,CAIQ,UAASpB,SAAT,EAAmB;AAAE;AAC5B;AACAD,MAAAA,QAAQ,CAACC,SAAD,CAAR,CAF0B,CAG1B;AACA;AACA,KATD,EASGqB,KATH,CASS,UAAUC,KAAV,EAAgB;AAAE;AAC1BjD,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYgD,KAAZ,EAFwB,CAEJ;AACpB,KAZD;AAaD;;AAAA,GApFO,CAsFR;;AACA,WAASC,mBAAT,CAA6BC,QAA7B,EAAsC;AACpCnD,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADoC,CAEpC;;AACD,QAAImD,WAAW,GAAGD,QAAQ,CAACpC,IAAT,CAAcsC,MAAd,CAAqBrC,KAAvC,CAHqC,CAIpC;;AACA,SAAK,IAAIsC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGF,WAAW,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA0C;AACxC;AACA,UAAIZ,OAAO,GAAGU,WAAW,CAACE,CAAD,CAAX,CAAeE,EAA7B,CAFwC,CAGxC;;AACAf,MAAAA,YAAY,CAACC,OAAD,CAAZ;AACD;AACF;;AAAA,GAlGO,CAqGR;;AACA,WAASe,YAAT,CAAsBC,UAAtB,EAAkCC,SAAlC,EAA4C;AAC1C3D,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuByD,UAAnC,EAA+CC,SAA/C;AACAhB,IAAAA,KAAK,CAACC,GAAN,CAAUnC,iBAAV,EAA4B;AAAE;AAC5BoC,MAAAA,MAAM,EAAC;AACLe,QAAAA,IAAI,EAAEF,UADD;AACa;AAClBG,QAAAA,IAAI,EAAEF;AAFD;AADmB,KAA5B,EAKGZ,IALH,CAKQ,UAASI,QAAT,EAAkB;AAAE;AAC1BnD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwByD,UAAxB,GAAqC,cAArC,GAAsDC,SAAlE;AACA3D,MAAAA,OAAO,CAACC,GAAR,CAAYkD,QAAZ,EAFwB,CAED;;AACvBD,MAAAA,mBAAmB,CAACC,QAAD,CAAnB,CAHwB,CAGO;AAChC,KATD,EASGH,KATH,CASS,UAAUC,KAAV,EAAgB;AAAE;AACzBjD,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYgD,KAAZ,EAFuB,CAEH;AACrB,KAZD,EAF0C,CActC;AAEL;;AAAA,GAtHO,CAwHR;;AACA,WAASa,iBAAT,CAA2BC,KAA3B,EAAiC;AAAE;AACjC;AACAA,IAAAA,KAAK,CAACC,cAAN,GAF+B,CAG/B;;AACA,QAAMN,UAAU,GAAGpD,eAAe,CAAC2D,KAAnC;AACA,QAAMN,SAAS,GAAGnD,gBAAgB,CAACyD,KAAnC;AACAjE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCyD,UAAtC;AACA1D,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC0D,SAAtC,EAP+B,CAQ/B;;AACAF,IAAAA,YAAY,CAACC,UAAD,EAAYC,SAAZ,CAAZ,CAT+B,CAU/B;AACD;;AAAA,GApIO,CAsIR;;AACAtD,EAAAA,gBAAgB,CAAC6D,gBAAjB,CAAkC,OAAlC,EAA2CJ,iBAA3C,EAvIQ,CAuIuD;;AAC/DvD,EAAAA,iBAAiB,CAAC2D,gBAAlB,CAAmC,OAAnC,EAA4CJ,iBAA5C,EAxIQ,CAwIuD;AAE/D;;AAEA,MAAIK,GAAJ,CA5IQ,CA6IR;;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,UAAU,GAAG,IAAjB;;AAGF,WAASC,OAAT,GAAmB;AAEjBtE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,QAAIsE,MAAM,GAAG;AAACC,MAAAA,GAAG,EAAC,SAAL;AAAgBC,MAAAA,GAAG,EAAE,CAAC;AAAtB,KAAb;AACAN,IAAAA,GAAG,GAAG,IAAIO,MAAM,CAACC,IAAP,CAAYC,GAAhB,CAAoBzE,QAAQ,CAAC0E,cAAT,CAAwB,KAAxB,CAApB,EAAoD;AACxDC,MAAAA,MAAM,EAAEP,MADgD;AAExDQ,MAAAA,IAAI,EAAE;AAFkD,KAApD,CAAN,CALiB,CASlB;;AAEC,QAAIC,OAAO,GAAE,6BAAb;AACAX,IAAAA,UAAU,GAAE,IAAIK,MAAM,CAACC,IAAP,CAAYM,UAAhB,CAA2B;AACrCD,MAAAA,OAAO,EAAEA;AAD4B,KAA3B,CAAZ,CAZiB,CAiBjB;AACA;;AAEA,aAASE,mBAAT,CAA6BC,UAA7B,EAAwC;AAChC;AACJd,MAAAA,UAAU,CAACe,UAAX,CAAsBD,UAAtB,EAFoC,CAGhC;;AACJd,MAAAA,UAAU,CAACgB,IAAX,CAAgBlB,GAAhB,EAAqBmB,MAArB;AACH,KAzBgB,CA2BjB;AACA;AACA;AACA;AACA;;AACH;;AACDC,EAAAA,MAAM,CAACjB,OAAP,GAAiBA,OAAjB;AACC,CApLA","sourcesContent":["\n//get photo id data from FLICKRs search.photo api\n  //set method to input flickr_params:/user_query and to only return images with geo data:true\n// loop through data and store photo ids in an array [photoIDs]\n// get geo data using photoIDs photo.getLocatoin api\n// loop through data and set each as a marker with content window on google map's api \n\n\n/*pull data to get ids, title, lon/lat. assign ids per div.\nuse ids to get photo urls\n\nfor each object in returned data, loop through and pull the id, title, lat/lon\nsend your id and get your photo,\n\nget put on the page\n */\n\n\nconsole.log(\"hello, chello. GoogleFlickr1.0\");\n//0. define global function variables\nconst resultsWindow = document.querySelector(\".resultsWindow\");\nconst picSearch_button = document.querySelector(\"[name='picSearch_button']\");\nconst picSearch_query = document.querySelector(\"[name='SearchInputField']\");\nconst tagsSearch_button = document.querySelector(\"[name='tagsSearch_button']\");\nconst tagsSearch_query = document.querySelector(\"[name='tagsSearchInputField']\");\n\n;(function(){\n    //1. wrapped inside this function, define global function variables\n    console.log ('flicker function booted...');\n    //** the url containg info FLICKR needs to return requested data. User text is fed thru using template literals: ${var}. url stored in a var. */\n    const SRCH_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=47fa016833c10c7cf777062f48eb2908&tags=${tagsQuery}&text=${photoQuery}&max_upload_date=1567857600&has_geo=1&extras=geo&format=json&nojsoncallback=1';\n\n    const INFO_API_URL_BASE= 'https://www.flickr.com/services/rest/?method=flickr.photos.getInfo&api_key=47fa016833c10c7cf777062f48eb2908&photo_id=${photoID}&format=json&nojsoncallback=1';\n    \n    const IMGurl_API_URL_BASE = 'https://www.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key=47fa016833c10c7cf777062f48eb2908&photo_id=${photoID}&format=json&nojsoncallback=1';\n\n\n    //7a. Pull content from neat objects such as title, lat, lon/ etc\n    function createPhotoBox(infoResponse){ \n     console.log(\"loading photo info...\" )\n     //store object properties in values\n     let photoDeck = infoResponse.data.photo.title._content;\n      //create div to hold all content\n      let resultPane = document.createElement('div');\n      resultPane.className = \"flickr_result\";\n      //create div to hold photo loaded 2ms later\n      let resultImg = document.createElement('div');\n      resultImg.className = \"flickr_img\";\n      //create container for text\n      let photoContent = document.createElement('p');\n      photoContent.className = \"flickr_content\";\n      //place content in container\n      photoContent.innerText = photoDeck;\n      //add containers to div\n      resultPane.appendChild(resultImg);\n      resultPane.appendChild(photoContent);\n      //add div to page\n      resultsWindow.appendChild(resultPane);\n    };\n    //7b. Pull urls containing sizes and jpgs. Selects 150x150/ \n    function pullURLS(infoImage){\n      \n      let photoSizes = infoImage.data.sizes;\n      //console.log(\"photoSize of: \" +)\n      console.log(photoSizes) //select size by label name\n      let img_lgSq = photoSizes.size.find( ({ label }) => label === 'Large Square' );\n      let imgSrc = img_lgSq.source; //set src=\" {in variable}\"\n    \n      let imgWindow = document.createElement(\"img\"); //create img element\n      imgWindow.setAttribute(\"src\", imgSrc) //set src as variable\n      imgWindow.className = \"flickr_img\"; //add shared classname\n      let img_box = document.querySelector(\".flickr_result\");\n      document.body.append(imgWindow) //add img to page \n    };\n    \n    //6. call API again, now sending photoIDs to flickr\n    function getPhotoInfo(photoID){ \n\n      // CALL 1: GETS USER INFO ON PHOTOS IN NEATER OBJECTS\n\n\n      console.log(\"fetching photo info...\");\n      axios.get(INFO_API_URL_BASE,{ //call the link\n        params:{\n          photo_id: photoID // pass thru your varibales to Flickr's parameters\n        }\n      }).then(function(infoResponse){ //then call this function\n        console.log(infoResponse);\n        createPhotoBox(infoResponse); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n       console.log(\"infoResponse isn't working...\");\n       console.log(error); //show error code in the console\n      });\n\n      ///CALL 2: GETS PHOTO SRC IN VARIOUS SIZES AS JPGS\n      \n      console.log(\"fetching photo sizes...\");\n      axios.get(IMGurl_API_URL_BASE,{ //call the link\n        params:{\n          photo_id: photoID // pass thru your varibales to Flickr's parameters\n        }\n      }).then(function(infoImage){ //then call this function\n       //console.log(infoImage);\n       pullURLS(infoImage)\n       //setTimeout(pullURLS(infoImage),2000); //(wait 2ms) pass the data to the next function;\n       //so photos load just a hair after thier div containers \n      }).catch(function (error){ //if get function failed, call this function \n       console.log(\"infoImage isn't working...\");\n       console.log(error); //show error code in the console\n      });\n    };\n\n    //5. process the photo ID data recieved from FLICKr\n    function handleQueryResponse(response){\n      console.log(\"processing data...\");\n      //target the array from the data you want to loop through\n     let photoReturn = response.data.photos.photo;\n      //loop through the array of data\n      for (var i=0; i < photoReturn.length; i++){\n        //store specific data in variables\n        let photoID = photoReturn[i].id;\n        //call next function, passing through new array\n        getPhotoInfo(photoID);\n      }\n    };\n\n\n    //4. call FLICKRs.photo.search and pass user values along as Flickrs params\n    function getQueryData(photoQuery, tagsQuery){\n      console.log(\"fetching with GET:\" + photoQuery ,tagsQuery);\n      axios.get(SRCH_API_URL_BASE,{ //call the link\n        params:{\n          text: photoQuery, // pass thru your varibales to Flickr's parameters\n          tags: tagsQuery\n        }\n      }).then(function(response){ //then call this function\n        console.log(\"data retrieved for \" + photoQuery + \" with tags: \" + tagsQuery );\n        console.log(response); //show returned call data in the console\n        handleQueryResponse(response); //pass the data to the next function;\n      }).catch(function (error){ //if get function failed, call this function \n        console.log(\"photo search isn't working...\");\n        console.log(error); //show error code in the console\n      }); //an addtional .then(function(var)) is always executed (optional)\n\n    };\n\n    //3.when button is clicked, run function \n    function makeSearchRequest(event){ //capture user value/calls getUserData()\n      //presents the browser from doing default behavior like refreshing/loading/ etc\n      event.preventDefault()\n      //turn user text into variable\n      const photoQuery = picSearch_query.value;\n      const tagsQuery = tagsSearch_query.value;\n      console.log('value of photo query: ', photoQuery);\n      console.log('value of photo query: ', tagsQuery);\n      //pass variables to next function\n      getQueryData(photoQuery,tagsQuery);\n      //function still works if one value is not entered.\n    };\n\n    //2. When user clickes the button, run this function (capture user values )\n    picSearch_button.addEventListener(\"click\", makeSearchRequest); //when user clicks button,\n    tagsSearch_button.addEventListener(\"click\", makeSearchRequest);// run this function\n\n    ////-----------GOOGLE MAPS---------------- GOOGLE MAPS------------------GOOGLE MAPS-----////\n\n    var map;\n    //var service;\n    var markers = [];\n    var infowindow = null;\n\n\n  function initMap() {\n\n    console.log(\"init map is here\")\n\n    var circus = {lat:33.813245, lng: -84.362171};\n    map = new google.maps.Map(document.getElementById('map'), {\n      center: circus,\n      zoom: 12\n    });\n   //makes places API a variable \n   \n    var content =\"something about this marker\"\n    infowindow= new google.maps.InfoWindow({\n      content: content\n\n    });\n    \n    //marker uses parameters and must include map: map to load the mapAPI \n    //var marker = new google.maps.Marker({position: circus, map: map});\n\n    function showContentInWindow(newContent){\n            //variable is placed in new content window\n        infowindow.setContent(newContent)\n            //content is set above the indicated marker\n        infowindow.open(map, marker);\n    }\n    \n    // marker.addListener(\"click\", function (){\n    //   //content is passed through the function \n    //   showContentInWindow(\"this is new content\");\n    //   console.log(\"clicky\");\n    // });\n}\nwindow.initMap = initMap;\n})()"],"file":"main.js"}